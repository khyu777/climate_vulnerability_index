import pandas as pd
import numpy as np
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

#Load data
print('Loading data...')
df = pd.read_csv('./data/openFEMA_claims20190430.csv', parse_dates=['dateofloss'])
print('Finished loading data')

#Split date into year, month, day
df['monthofloss'] = df['dateofloss'].dt.month
df['dayofloss'] = df['dateofloss'].dt.day

#Drop unnecessary columns
df = df.drop(['asofdate', 'dateofloss', 'reportedcity', 'originalconstructiondate', 'originalnbdate', 'reportedzipcode'], axis=1)
df = df.dropna(subset=['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim'], how='any')

#Set categorical columns
cat_columns = ['agriculturestructureindicator', 'basementenclosurecrawlspacetype', 'condominiumindicator', 'elevatedbuildingindicator', 'elevationcertificateindicator', 'floodzone', 'houseworship', 'locationofcontents', 'nonprofitindicator', 'obstructiontype', 'occupancytype', 'postfirmconstructionindicator', 'ratemethod', 'smallbusinessindicatorbuilding', 'state', 'primaryresidence']
df[cat_columns] = df[cat_columns].astype('str')
df['amountclaim'] = df['amountpaidonbuildingclaim'] + df['amountpaidoncontentsclaim']

#Split data into features & target
X = df.drop(['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim', 'amountpaidonincreasedcostofcomplianceclaim', 'amountclaim'], axis=1)[:50000]
y = df['amountclaim'][:50000].values

num_columns = [column for column in X.columns if column not in cat_columns]

#Split into train and test data
print('Splitting data...')
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

cat_pipe = Pipeline([
    ('si', SimpleImputer(strategy='constant')),
    ('ohe', OneHotEncoder(sparse=False, handle_unknown='ignore'))
])
num_pipe = Pipeline([
    ('si', SimpleImputer(strategy='median')),
    ('ss', StandardScaler())
])

ct = ColumnTransformer([
    ('cat', cat_pipe, cat_columns),
    ('num', num_pipe, num_columns)
])

final_pipe = Pipeline([
    ('transform', ct),
    ('rfr', RandomForestRegressor(n_estimators=300, max_features=50, max_depth=20,n_jobs=-1, verbose=1))
])

print('Fitting random forest...')
final_pipe.fit(X_train, y_train)
print('Finished fitting model')
print(final_pipe.score(X_test, y_test))