import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

#Load data
print('Loading data...')
df = pd.read_csv('./data/openFEMA_claims20190430.csv', parse_dates=['dateofloss'])
print('Finished loading data')

#Split date into year, month, day
df['monthofloss'] = df['dateofloss'].dt.month
df['dayofloss'] = df['dateofloss'].dt.day

#Drop unnecessary columns
df = df.drop(['asofdate', 'dateofloss', 'reportedcity', 'originalconstructiondate', 'originalnbdate', 'reportedzipcode'], axis=1)

#Set categorical columns
cat_columns = ['agriculturestructureindicator', 'basementenclosurecrawlspacetype', 'condominiumindicator', 'elevatedbuildingindicator', 'elevationcertificateindicator', 'floodzone', 'houseworship', 'locationofcontents', 'nonprofitindicator', 'obstructiontype', 'occupancytype', 'postfirmconstructionindicator', 'ratemethod', 'smallbusinessindicatorbuilding', 'state', 'primaryresidence']

#Split data into features & target
X = df.drop(['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim', 'amountpaidonincreasedcostofcomplianceclaim'], axis=1)[:5000]
y = df['amountpaidonbuildingclaim'][:5000]

#Split into train and test data
print('Splitting data...')
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

cat_pipe = Pipeline([
    ('si', SimpleImputer(strategy='constant', fill_value='missing')),
    ('ohe', OneHotEncoder(sparse=False, handle_unknown='ignore'))
])

ct = ColumnTransformer([
    ('cat', cat_pipe, cat_columns)
], remainder='passthrough')

#Transform data
print('Fitting and transforming train data...')
X_train_trans = ct.fit_transform(X_train.astype('str'))
X_test_trans = ct.transform(X_test.astype('str'))
print(X_train_trans.shape, X_test_trans.shape)